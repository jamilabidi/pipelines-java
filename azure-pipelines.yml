trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - version.txt
    - build_version.json
pool:
  vmImage: 'ubuntu-latest'

steps:

#Si lastVersion.txt n'existe pas déjà, créer avec une version initiale
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Chemin du fichier lastVersion.txt
      $lastVersionFilePath = "$(Build.ArtifactStagingDirectory)/lastVersion.txt"

      # Si le fichier n'existe pas, le créer avec une version initiale
      if (-Not (Test-Path $lastVersionFilePath)) {
          echo "Création du fichier lastVersion.txt avec la version initiale 1.0.0"
          Set-Content -Path $lastVersionFilePath -Value "1.0.0"
      } else {
          echo "Le fichier lastVersion.txt existe déjà."
      }
  displayName: 'Créer lastVersion.txt si nécessaire'

# télécharger le fichier lastVersion.txt
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'versionInfo'
    downloadPath: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Télécharger lastVersion.txt'

# Étape pour incrémenter la version dans le fichier version.txt
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Chemin vers le fichier version.txt
      $versionFilePath = "$(Build.SourcesDirectory)/version.txt"
      
      # Lire la version actuelle à partir du fichier version.txt
      $version = Get-Content $versionFilePath
      
      # Diviser la version en parties : majeure, mineure, patch
      $versionParts = $version -split '\.'
      $major = [int]$versionParts[0]
      $minor = [int]$versionParts[1]
      $patch = [int]$versionParts[2]
      
      # Lire la dernière version utilisée depuis le fichier pour comparaison
      if (Test-Path "$(Build.ArtifactStagingDirectory)/lastVersion.txt") {
        $lastVersion = Get-Content "$(Build.ArtifactStagingDirectory)/lastVersion.txt"
        $lastVersionParts = $lastVersion -split '\.'
        $lastMajor = [int]$lastVersionParts[0]
        $lastMinor = [int]$lastVersionParts[1]
      } else {
        # Si aucun historique, initialiser avec la version actuelle
        $lastMajor = $major
        $lastMinor = $minor
      }
      
      # Afficher la version actuelle
      echo "Version actuelle : $major.$minor.$patch"
      
      # Si le numéro majeur a changé, réinitialiser mineur et patch
      if ($major -ne $lastMajor) {
          echo "Incrémentation du numéro majeur et réinitialisation du mineur et du patch..."
          $minor = 0
          $patch = 0
      }
      # Sinon, si le numéro mineur a changé, réinitialiser le patch
      elseif ($minor -ne $lastMinor) {
          echo "Incrémentation du numéro mineur et réinitialisation du patch..."
          $patch = 0
      } else {
          echo "Aucune modification du numéro majeur ou mineur, incrémentation du patch..."
          $patch++
      }


      # Construire la nouvelle version
      $newVersion = "$major.$minor.$patch"

      # Afficher la nouvelle version
      echo "Nouvelle version : $newVersion"
      
      # Mettre à jour le fichier version.txt avec la nouvelle version
      Set-Content -Path $versionFilePath -Value $newVersion
      
      # Enregistrer la nouvelle version et les nouveaux numéros majeur et mineur dans les variables de build
      echo "##vso[task.setvariable variable=version]$newVersion"
      echo "##vso[task.setvariable variable=LAST_MAJOR]$major"
      echo "##vso[task.setvariable variable=LAST_MINOR]$minor"
  displayName: 'Incrémenter la version dans version.txt'

# Étape pour valider et pousser les modifications dans GitHub
- script: |
    git config --global user.name "jamil"
    git config --global user.email "abidijamil@gmail.com"
    git remote set-url origin "https://$(GITHUB_TOKEN)@github.com/jamilabidi/pipelines-java"

    # Sauvegarder temporairement les modifications locales
    git stash

    # Tirer les dernières modifications de la branche distante avant de pousser
    git pull origin main --rebase

    # Restaurer les modifications locales après le pull
    git stash pop
    
    # Ajouter les modifications dans version.txt
    git add version.txt
    
    # Valider les modifications
    git commit -m "Incrémentation de la version à $(version)"
    
    # Pousser les modifications vers la branche main
    git push origin HEAD:main
  displayName: 'Valider et pousser le fichier de version'

#sauvegarder lastversion en tant qu'artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/lastVersion.txt'
    artifactName: 'versionInfo'
    publishLocation: 'Container'
  displayName: 'Publier lastVersion.txt comme artefact'