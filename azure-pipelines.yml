trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - version.txt
    - build_version.json

pool:
  vmImage: 'ubuntu-latest'

steps:
# Create lastVersion.txt if it doesn't exist
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $lastVersionFilePath = "$(Build.ArtifactStagingDirectory)/lastVersion.txt"
      if (-Not (Test-Path $lastVersionFilePath)) {
          Write-Host "Creating lastVersion.txt with initial version 1.0.0"
          Set-Content -Path $lastVersionFilePath -Value "1.0.0"
      } else {
          Write-Host "lastVersion.txt already exists."
      }
  displayName: 'Create lastVersion.txt if necessary'

# Publish lastVersion.txt as an artifact
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/lastVersion.txt'
    artifactName: 'versionInfo'
    publishLocation: 'Container'
  displayName: 'Publish lastVersion.txt as artifact'

# Download lastVersion.txt
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'versionInfo'
    downloadPath: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Download lastVersion.txt'

# Increment version in version.txt
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $versionFilePath = "$(Build.SourcesDirectory)/version.txt"
      $lastVersionFilePath = "$(Build.ArtifactStagingDirectory)/versionInfo/lastVersion.txt"
      
      if (Test-Path $versionFilePath) {
          $version = Get-Content $versionFilePath
      } else {
          $version = "1.0.0"
          Set-Content -Path $versionFilePath -Value $version
      }
      
      $versionParts = $version -split '\.'
      $major = [int]$versionParts[0]
      $minor = [int]$versionParts[1]
      $patch = [int]$versionParts[2]
      
      if (Test-Path $lastVersionFilePath) {
        $lastVersion = Get-Content $lastVersionFilePath
        $lastVersionParts = $lastVersion -split '\.'
        $lastMajor = [int]$lastVersionParts[0]
        $lastMinor = [int]$lastVersionParts[1]
        $lastPatch = [int]$lastVersionParts[2]
      } else {
        $lastMajor = $major
        $lastMinor = $minor
        $lastPatch = $patch
      }
      
      Write-Host "Current version: $major.$minor.$patch"
      Write-Host "Last version: $lastMajor.$lastMinor.$lastPatch"
      
      # Check for major version increment
      if ($major -gt $lastMajor) {
          Write-Host "Major version was incremented manually."
          $minor = 0
          $patch = 0
      }
      # Check for minor version increment
      elseif ($minor -gt $lastMinor) {
          Write-Host "Minor version was incremented manually."
          $patch = 0
      }
      # If no manual changes, increment patch
      elseif ($major -eq $lastMajor -and $minor -eq $lastMinor) {
          Write-Host "Incrementing patch version..."
          $patch++
      }
      # Fallback for unexpected scenarios
      else {
          Write-Host "Unexpected version change. Using the version from version.txt."
      }

      $newVersion = "$major.$minor.$patch"
      Write-Host "New version: $newVersion"
      
      Set-Content -Path $versionFilePath -Value $newVersion
      Set-Content -Path $lastVersionFilePath -Value $newVersion
      
      Write-Host "##vso[task.setvariable variable=version]$newVersion"
      Write-Host "##vso[task.setvariable variable=LAST_MAJOR]$major"
      Write-Host "##vso[task.setvariable variable=LAST_MINOR]$minor"
  displayName: 'Increment version in version.txt'

# Commit and push changes to GitHub
- script: |
    git config --global user.name "Azure DevOps Pipeline"
    git config --global user.email "azuredevops@example.com"
    git remote set-url origin "https://$(GITHUB_TOKEN)@github.com/jamilabidi/pipelines-java"

    git fetch origin
    git checkout main
    git pull origin main

    git add version.txt
    
    if git diff --staged --quiet; then
      echo "No changes to commit"
    else
      git commit -m "Increment version to $(version)"
      git push origin main
    fi
  displayName: 'Commit and push version file'
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)

# Publish lastVersion.txt as an artifact (again, to update it)
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/versionInfo/lastVersion.txt'
    artifactName: 'versionInfo'
    publishLocation: 'Container'
  displayName: 'Update lastVersion.txt artifact'
